pragma solidity ^0.5.3;

contract ERC223Interface {
    function balanceOf(address who)public view returns (uint);
    function transfer(address to, uint value)public returns(bool success);
    function transfer(address to, uint value, bytes memory data) public returns(bool success);
    event Transfer(address indexed from, address indexed to, uint value);
}

interface ERC223RecievingContract{
    function tokenFallBack(address _from, uint _value, bytes calldata _data) external;
}

contract Context{
    function _msgSender() internal view returns(address) {
        return msg.sender;
    }
    function _msgData() internal pure returns(bytes memory){
        return msg.data;
    }
}

contract Ownable is Context{
    address private _owner;

    event ownershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() public{
        _setOwner(_msgSender());
    }

    function owner() public view returns (address){
        return _owner;
    }

    modifier onlyOwner(){
        require(owner() == _msgSender());
        _;
    }

    function renounceOwnership() internal onlyOwner{
        _setOwner(address(0));
    }

    function transferOwnership(address newOwner) public onlyOwner{
        require(newOwner != address(0));
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit ownershipTransferred(oldOwner, newOwner);
    }
}

contract TokenVesting is ERC223RecievingContract,Ownable {

    address public SBTERC20;
    
    address public FOUNDERS_ADDRESS;

    address public ADVISORS_ADDRESS;

    address public TEAM_ADDRESS;

    uint256 constant public FOUNDERS_TOTAL_TOKEN = 120000000 * 10 ** 18;

    uint256 constant public ADVISORS_TOTAL_TOKEN = 16000000 * 10 ** 18;

    uint256 constant public TEAM_TOTAL_TOKEN = 24000000 * 10 ** 18;

    uint256 public FOUNDERS_TOKEN_SENT;

    uint256 public ADVISORS_TOKEN_SENT;

    uint256 public TEAM_TOKEN_SENT;

    uint256 public VESTING_START_TIMESTAMP;

    struct VestingStage{
        uint256 date;
        uint256 tokensUnlockedPercentage;
        uint256 foundersTokensUnlocked;
        uint256 advisorsTokensUnlocked;
        uint256 teamTokensUnlocked;
    }

    // array of structures vesting stage which stores all the value of vestingstructure
    VestingStage[36] public stages;

    event withdraw(address _to, uint256 _value);

    constructor (address _SBTERC20, uint256 _vestingStartTimestamp, address _foundersAddress, address _advisorsAddress,address _teamAddress) public {
        SBTERC20 = _SBTERC20;
        VESTING_START_TIMESTAMP = _vestingStartTimestamp;
        FOUNDERS_ADDRESS = _foundersAddress;
        ADVISORS_ADDRESS = _advisorsAddress;
        TEAM_ADDRESS = _teamAddress;
        initVestingStages();
    }

    function initVestingStages () internal {
        uint256 month = 10 minutes;
        stages[0].date = VESTING_START_TIMESTAMP;
        stages[0].foundersTokensUnlocked = 3333345 * 10**18;
        stages[0].advisorsTokensUnlocked = 444460 * 10**18;
        stages[0].teamTokensUnlocked = 666690 * 10**18;

   for (uint8 i = 1; i < 36 ; i++) 
   {
       stages[i].date = stages[i-1].date + month;
       stages[i].foundersTokensUnlocked = stages[i-1].foundersTokensUnlocked + (3333333 * 10 ** 18);
       stages[i].advisorsTokensUnlocked = stages[i-1].advisorsTokensUnlocked + (444444 * 10 ** 18);
       stages[i].teamTokensUnlocked = stages[i-1].teamTokensUnlocked + (666666 * 10 ** 18);
   }

   }



function tokenFallBack(address, uint _value, bytes calldata) external {
    require(msg.sender == SBTERC20);
    uint256 TOTAL_TOKENS = FOUNDERS_TOTAL_TOKEN + (ADVISORS_TOTAL_TOKEN) + (TEAM_TOTAL_TOKEN);
    require(_value == TOTAL_TOKENS);
}

function withdrawFoundersToken () external onlyOwner {
    uint256 tokensToSend = getAvailableTokensOfFounders();
    require(tokensToSend > 0);
    sendTokens(FOUNDERS_ADDRESS, tokensToSend);
}

function withdrawAdvisorsToken () external onlyOwner{
    uint256 tokensToSend = getAvailableTokensOfAdvisors();
    require(tokensToSend > 0);
    sendTokens(ADVISORS_ADDRESS, tokensToSend);
}

function withdrawTeamToken () external onlyOwner{
    uint256 tokensToSend = getAvailableTokensOfTeam();
    require(tokensToSend > 0);
    sendTokens(TEAM_ADDRESS, tokensToSend);
}

function getAvailableTokensOfFounders () public view returns (uint256 tokensToSend) {
    uint256 tokensUnlocked = getTokensUnlocked(FOUNDERS_ADDRESS);
    tokensToSend = getTokensAmountAllowedToWithdraw(FOUNDERS_ADDRESS,tokensUnlocked);
} 

function getAvailableTokensOfAdvisors () public view returns (uint256 tokensToSend) {
    uint256 tokensUnlocked = getTokensUnlocked(ADVISORS_ADDRESS);
    tokensToSend = getTokensAmountAllowedToWithdraw(ADVISORS_ADDRESS,tokensUnlocked);
}

function getAvailableTokensOfTeam () public view returns (uint256 tokensToSend) {
    uint256 tokensUnlocked = getTokensUnlocked(TEAM_ADDRESS);
    tokensToSend = getTokensAmountAllowedToWithdraw(TEAM_ADDRESS,tokensUnlocked);
}

function getTokensUnlocked (address role) private view returns(uint256) {
    uint256 allowedTokens;

    for(uint8 i = 0; i< stages.length; i++){
        if(now >= stages[i].date){
            if(role == FOUNDERS_ADDRESS){
                allowedTokens = stages[i].foundersTokensUnlocked;
            }
            else if(role == ADVISORS_ADDRESS){
                allowedTokens = stages[i].advisorsTokensUnlocked;
            }
            else if(role == TEAM_ADDRESS){
                allowedTokens = stages[i].teamTokensUnlocked;
            }
        }
    }
    return allowedTokens;
}

function getTokensAmountAllowedToWithdraw ( address role, uint256 tokensUnlocked) private view returns (uint256) {
    uint256 tokenUnsentAmount;
    if(role == FOUNDERS_ADDRESS){
        tokenUnsentAmount = tokensUnlocked - FOUNDERS_TOKEN_SENT;
    }
    else if(role == ADVISORS_ADDRESS){
        tokenUnsentAmount = tokensUnlocked - ADVISORS_TOKEN_SENT;
    }
    else if(role == TEAM_ADDRESS){
        tokenUnsentAmount = tokensUnlocked - TEAM_TOKEN_SENT;
    }
    return tokenUnsentAmount;

}

function sendTokens (address role, uint256 tokensToSend) private {
    if(tokensToSend > 0){
        if(role == FOUNDERS_ADDRESS){
            FOUNDERS_TOKEN_SENT = FOUNDERS_TOKEN_SENT + tokensToSend;
            ERC223Interface(SBTERC20).transfer(FOUNDERS_ADDRESS,tokensToSend);
            emit withdraw(FOUNDERS_ADDRESS,tokensToSend);
        } else if(role == ADVISORS_ADDRESS){
            ADVISORS_TOKEN_SENT = ADVISORS_TOKEN_SENT + tokensToSend;           
        } else if(role == TEAM_ADDRESS){
            TEAM_TOKEN_SENT = TEAM_TOKEN_SENT + tokensToSend;
        }
    }
}
}
